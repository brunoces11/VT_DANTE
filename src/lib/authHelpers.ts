// Verifica√ß√£o REAL e DIRETA de email no banco Supabase
import { supabase } from './supabase';

// Fun√ß√£o para verificar se email j√° existe - ABORDAGEM CORRETA
export const checkEmailExists = async (email: string): Promise<{ exists: boolean; error?: string }> => {
  try {
    console.log('üîç [checkEmailExists] Iniciando verifica√ß√£o DIRETA para:', email);
    
    // Normalizar email
    const normalizedEmail = email.toLowerCase().trim();
    console.log('üìß [checkEmailExists] Email normalizado:', normalizedEmail);
    
    // M√âTODO 1: Tentar consulta direta na tabela auth.users (se RLS permitir)
    try {
      console.log('üéØ [checkEmailExists] Tentando consulta DIRETA na tabela auth.users...');
      
      const { data, error, count } = await supabase
        .from('auth.users')
        .select('email', { count: 'exact', head: true })
        .eq('email', normalizedEmail)
        .limit(1);
      
      if (!error) {
        const exists = (count || 0) > 0;
        console.log(`‚úÖ [checkEmailExists] Consulta direta SUCESSO - Email ${exists ? 'EXISTE' : 'DISPON√çVEL'}`);
        return { exists };
      } else {
        console.log('‚ö†Ô∏è [checkEmailExists] Consulta direta falhou (RLS?), tentando m√©todo alternativo:', error.message);
      }
    } catch (directQueryError) {
      console.log('‚ö†Ô∏è [checkEmailExists] Erro na consulta direta:', directQueryError);
    }
    
    // M√âTODO 2: Usar RPC function (se existir)
    try {
      console.log('üéØ [checkEmailExists] Tentando RPC function...');
      
      const { data, error } = await supabase.rpc('check_user_email_exists', {
        email_to_check: normalizedEmail
      });
      
      if (!error) {
        console.log(`‚úÖ [checkEmailExists] RPC SUCESSO - Email ${data ? 'EXISTE' : 'DISPON√çVEL'}`);
        return { exists: !!data };
      } else {
        console.log('‚ö†Ô∏è [checkEmailExists] RPC falhou, tentando m√©todo de fallback:', error.message);
      }
    } catch (rpcError) {
      console.log('‚ö†Ô∏è [checkEmailExists] Erro no RPC:', rpcError);
    }
    
    // M√âTODO 3: Fallback usando signInWithPassword (SEM criar usu√°rio)
    try {
      console.log('üéØ [checkEmailExists] Usando fallback com signInWithPassword...');
      
      // Tentar login com senha inv√°lida - se email existe, erro ser√° "Invalid login credentials"
      // Se email n√£o existe, erro ser√° diferente
      const { error } = await supabase.auth.signInWithPassword({
        email: normalizedEmail,
        password: 'invalid_password_for_check_' + Math.random()
      });
      
      if (error) {
        // Se erro √© "Invalid login credentials", email EXISTE mas senha est√° errada
        if (error.message.includes('Invalid login credentials') || 
            error.message.includes('Invalid email or password')) {
          console.log('‚úÖ [checkEmailExists] Fallback - Email EXISTE (credenciais inv√°lidas)');
          return { exists: true };
        }
        
        // Se erro √© sobre email n√£o encontrado, email N√ÉO EXISTE
        if (error.message.includes('User not found') ||
            error.message.includes('Email not confirmed') ||
            error.message.includes('No user found')) {
          console.log('‚úÖ [checkEmailExists] Fallback - Email DISPON√çVEL (usu√°rio n√£o encontrado)');
          return { exists: false };
        }
        
        // Para outros erros, assumir que n√£o existe (evitar falsos positivos)
        console.log('‚ö†Ô∏è [checkEmailExists] Erro desconhecido no fallback - assumindo dispon√≠vel:', error.message);
        return { exists: false };
      }
      
      // Se chegou aqui sem erro, algo est√° errado (n√£o deveria fazer login com senha inv√°lida)
      console.log('‚ö†Ô∏è [checkEmailExists] Login inesperado com senha inv√°lida - fazendo logout...');
      await supabase.auth.signOut();
      return { exists: true };
      
    } catch (fallbackError) {
      console.error('‚ùå [checkEmailExists] Erro no fallback:', fallbackError);
      return { exists: false, error: 'Erro interno ao verificar email' };
    }
    
  } catch (error) {
    console.error('‚ùå [checkEmailExists] Erro geral:', error);
    return { exists: false, error: 'Erro interno ao verificar email' };
  }
};

// Fun√ß√£o auxiliar para limpar sess√µes indesejadas
export const cleanupTempSession = async () => {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    if (session?.user?.user_metadata?.temp_check) {
      console.log('üßπ Removendo sess√£o tempor√°ria de verifica√ß√£o...');
      await supabase.auth.signOut();
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Erro ao limpar sess√£o tempor√°ria:', error);
  }
};